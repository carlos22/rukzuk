<?php
namespace Cms\Access;

use Seitenbau\Log;
use Seitenbau\Registry;

class PasswordHasher
{

  /**
   * First element (index 0) is the default for new passwords
   *
   * @var array
   */
  private $password_hashers = array(
    '\Cms\Access\Hashers\PBKDF2PasswordHasher',
    '\Cms\Access\Hashers\MD5PasswordHasher',
    '\Cms\Access\Hashers\MD5StaticSaltPasswordHasher',
  );

  private $hashers = null;

  /**
   * Creates a hash for the given password
   *
   * @param string      $password the password to hash
   *
   * @param string|null $salt     salt, if not provided this should be randomly generated by the impl
   *
   * @throws \Exception
   * @return string             the hashed password in format <algorithm>$<iterations>$<salt>$<hash>
   */
  public function create($password, $salt = null)
  {

    $hashers = $this->getHasher();
    if (!is_array($hashers) || count($hashers) < 1) {
      throw new \Exception('No Password Hasher found');
    }

    return $hashers[0]->create($password, $salt);
  }

  /**
   * Checks if the given password matches the given hash
   *
   * @param string $password  the password to check
   * @param string $good_hash the hash which should be match the password
   *
   * @return boolean             true if $password and $good_hash match, false otherwise
   */
  public function validate($password, $good_hash)
  {
    $hashers = $this->getHasher();
    foreach ($hashers as $h) {
      if (!$h->isPasswordUsable($good_hash)) {
        continue;
      }
      if ($h->validate($password, $good_hash) === true) {
        return true;
      }
    }
    return false;
  }


  /**
   *
   * @return Hashers\IPasswordHasher[]
   */
  protected function getHasher()
  {
    if (is_null($this->hashers)) {
      $this->hashers = array();
      foreach ($this->password_hashers as $h) {
        try {
          $this->hashers[] = new $h();
        } catch (\Exception $e) {
          Registry::getLogger()->logException(__METHOD__, __LINE__, $e, Log::WARN);
        }
      }
    }
    return $this->hashers;
  }
}
