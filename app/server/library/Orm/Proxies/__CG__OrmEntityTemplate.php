<?php

namespace Orm\Proxies\__CG__\Orm\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Template extends \Orm\Entity\Template implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'id', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'websiteid', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'name', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'contentchecksum', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'content', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'pagetype', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'usedmoduleids', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'lastupdate');
        }

        return array('__isInitialized__', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'id', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'websiteid', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'name', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'contentchecksum', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'content', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'pagetype', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'usedmoduleids', '' . "\0" . 'Orm\\Entity\\Template' . "\0" . 'lastupdate');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Template $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setWebsiteid($websiteid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWebsiteid', array($websiteid));

        return parent::setWebsiteid($websiteid);
    }

    /**
     * {@inheritDoc}
     */
    public function getWebsiteid()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getWebsiteid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebsiteid', array());

        return parent::getWebsiteid();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentchecksum($contentchecksum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentchecksum', array($contentchecksum));

        return parent::setContentchecksum($contentchecksum);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentchecksum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentchecksum', array());

        return parent::getContentchecksum();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($content)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', array($content));

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', array());

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentChecksumOnUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentChecksumOnUpdate', array());

        return parent::setContentChecksumOnUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPagetype($pageType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPagetype', array($pageType));

        return parent::setPagetype($pageType);
    }

    /**
     * {@inheritDoc}
     */
    public function getPagetype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPagetype', array());

        return parent::getPagetype();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsedmoduleids()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsedmoduleids', array());

        return parent::getUsedmoduleids();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastupdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastupdate', array());

        return parent::getLastupdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastupdate($lastupdate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastupdate', array($lastupdate));

        return parent::setLastupdate($lastupdate);
    }

    /**
     * {@inheritDoc}
     */
    public function setNewGeneratedId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewGeneratedId', array());

        return parent::setNewGeneratedId();
    }

    /**
     * {@inheritDoc}
     */
    public function updateUsedModuleIds()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateUsedModuleIds', array());

        return parent::updateUsedModuleIds();
    }

    /**
     * {@inheritDoc}
     */
    public function getExportColumnsAndValues()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExportColumnsAndValues', array());

        return parent::getExportColumnsAndValues();
    }

    /**
     * {@inheritDoc}
     */
    public function toCmsData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toCmsData', array());

        return parent::toCmsData();
    }

}
