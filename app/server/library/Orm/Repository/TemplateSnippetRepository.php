<?php
namespace Orm\Repository;

use Doctrine\ORM\EntityRepository;
use Cms\Exception as CmsException;

/**
 * TemplateSnippetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TemplateSnippetRepository extends EntityRepository
{
  /**
   * search TemplateSnippets by Website id order by name
   *
   * @param  string $websiteId
   * @param  string $orderDirection
   * @return array[] Orm\Template
   */
  public function findByWebsiteIdOrderedByName($websiteId, $orderDirection = 'ASC')
  {
    $orderDirection = \strtoupper($orderDirection);
    if (in_array($orderDirection, array('ASC', 'DESC'))) {
      $dql = sprintf(
          "SELECT ts FROM Orm\\Entity\\TemplateSnippet ts WHERE ts.websiteid LIKE :websiteid ORDER BY LOWER(ts.name) %s",
          $orderDirection
      );
    } else {
      $dql = 'SELECT ts FROM Orm\\Entity\\TemplateSnippet ts WHERE ts.websiteid LIKE :websiteid';
    }

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteid', $websiteId);
    return $query->getResult();
  }

  /**
   * search TemplateSnippets by Website id and TemplateSnippets ids
   *
   * @param string  $websiteId
   * @param array   $ids
   *
   * @return  array
   */
  public function findByIds($websiteId, array $ids)
  {
    if (count($ids) == 0) {
      return array();
    }

    $dql = 'SELECT ts FROM Orm\\Entity\\TemplateSnippet ts'
      . ' WHERE ts.websiteid LIKE :websiteid AND ts.id IN (:ids)';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteid', $websiteId);
    $query->setParameter('ids', $ids);
    return $query->getResult();
  }
  
  /**
   * deleting TemplateSnippets by ids and website id
   *
   * @param string $websiteId
   * @param array  $ids
   *
   * @return  array
   */
  public function deleteByIds($websiteId, array $ids)
  {
    $dql = 'DELETE FROM Orm\\Entity\\TemplateSnippet ts'
      . ' WHERE ts.websiteid LIKE :websiteid AND ts.id IN (:ids)';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteid', $websiteId);
    $query->setParameter('ids', $ids);
    return $query->getResult();
  }

  /**
   * search TemplateSnippets by Website id and content fragment
   *
   * @param string $websiteId
   * @param string $needle
   *
   * @return  array
   */
  public function searchInContent($websiteId, $needle)
  {
    $dql = 'SELECT DISTINCT ts FROM Orm\\Entity\\TemplateSnippet ts'
      . ' WHERE ts.websiteid LIKE :websiteid AND ts.content LIKE :needle';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteid', $websiteId);
    $query->setParameter('needle', '%'.$needle.'%');
    return $query->getResult();
  }
}
