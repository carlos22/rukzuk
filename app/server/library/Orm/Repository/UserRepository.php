<?php

namespace Orm\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
  /**
   * @param  array $ids
   * @return array
   */
  public function findByIds(array $ids)
  {
    $dql = 'SELECT u FROM Orm\\Entity\User u WHERE u.id IN (:ids)';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('ids', $ids);
    return $query->getResult();
  }
  /**
   * @param  string $email
   * @param  string $id
   * @return \Orm\Entity\User
   */
  public function findOneByEmailAndIgnoreId($email, $id)
  {
    $dql = 'SELECT DISTINCT u FROM Orm\\Entity\\User u'
      . ' WHERE u.email = :email AND u.id != :id';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('email', $email);
    $query->setParameter('id', $id);
    $users = $query->getResult();
    
    if (count($users) > 0) {
      $user = $users[0];
    } else {
      $user = null;
    }
    
    return $user;
  }
  
  
  /**
   * @param  string  $websiteId
   * @return array[] \Orm\Entity\User
   */
  public function findAllByWebsiteId($websiteId)
  {
    $groupsOfWebsite = $this->_em
                            ->getRepository('Orm\\Entity\\Group')
                            ->findByWebsiteid($websiteId);
    
    $usersOfWebsiteGroups = array();
    
    if (count($groupsOfWebsite) > 0) {
      $completeUserIdsOfGroups = array();
      
      foreach ($groupsOfWebsite as $groupOfWebsite) {
        $groupUserIds = json_decode($groupOfWebsite->getUsers());
        if (count($groupUserIds) > 0) {
          foreach ($groupUserIds as $groupUserId) {
            if (!in_array($groupUserId, $completeUserIdsOfGroups)) {
              $completeUserIdsOfGroups[] = $groupUserId;
            }
          }
        }
      }
      
      if (count($completeUserIdsOfGroups) > 0) {
        $usersOfWebsiteGroups = $this->findByIds($completeUserIdsOfGroups);
      }
    }
    
    return $usersOfWebsiteGroups;
  }
  
  /**
   * @return array[] \Orm\Entity\User
   */
  public function findAllSuperusers()
  {
    $dql = 'SELECT DISTINCT u FROM Orm\\Entity\\User u WHERE u.issuperuser = :issuperuser';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('issuperuser', true);
    return $query->getResult();
  }
}
