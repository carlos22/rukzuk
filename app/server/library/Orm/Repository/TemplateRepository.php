<?php
namespace Orm\Repository;

use Doctrine\ORM\EntityRepository;
use Cms\Exception as CmsException;

/**
 * TemplateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class TemplateRepository extends EntityRepository
{
  /**
   * @param  string $orderDirection
   * @return array[] \Orm\Entity\Template
   * @throws \Cms\Exception
   */
  public function findByWebsiteIdOrderedByName($websiteId, $orderDirection = 'ASC')
  {
    $orderDirection = \strtoupper($orderDirection);
    if (!in_array($orderDirection, array('ASC', 'DESC'))) {
      throw new CmsException('1', __METHOD__, __LINE__);
    }
    $dql = sprintf(
        'SELECT t FROM Orm\\Entity\\Template t WHERE t.websiteid LIKE :websiteid ORDER BY LOWER(t.name) %s',
        $orderDirection
    );

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteid', $websiteId);
    return $query->getResult();
  }

  /**
   * Sucht im Content des Templates nach einem Ausdruck
   *
   * @param string $needle
   * @param string $websiteId
   *
   * @return  array
   */
  public function searchInContent($needle, $websiteId)
  {
    $dql = 'SELECT DISTINCT t FROM Orm\\Entity\\Template t'
      . ' WHERE t.content LIKE :needle AND t.websiteid LIKE :websiteid';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteid', $websiteId);
    $query->setParameter('needle', '%'.$needle.'%');
    return $query->getResult();
  }

  /**
   * Sucht nach Templates mit angegebenen Templates-IDs
   *
   * @param array $templateIds
   * @param string $websiteId
   *
   * @return  array
   */
  public function findByIds(array $ids, $websiteId)
  {
    if (count($ids) == 0) {
      return array();
    }

    $dql = 'SELECT t FROM Orm\\Entity\\Template t'
      . ' WHERE t.websiteid LIKE :websiteid AND t.id IN (:ids)';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteid', $websiteId);
    $query->setParameter('ids', $ids);
    return $query->getResult();
  }

  /**
   * finds templates using given module id
   *
   * @param string $websiteId
   * @param string $moduleId
   *
   * @return  array
   */
  public function findByWebsiteIdAndModuleId($websiteId, $moduleId)
  {
    $dql = 'SELECT DISTINCT t FROM Orm\\Entity\\Template t'
      . ' WHERE t.websiteid = :websiteId AND t.usedmoduleids LIKE :moduleIdQuery';

    $query = $this->_em->createQuery($dql);
    $query->setParameter('websiteId', $websiteId);
    $query->setParameter('moduleIdQuery', '%'.$moduleId.'%');
    return $query->getResult();
  }
}
