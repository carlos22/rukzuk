Ext.ns('CMS.imp');

/**
 * A window for querying the user what to do in case of conflicts when importing modules
 * @class CMS.imp.ImportConflictWindow
 * @extends Ext.Window
 */
CMS.imp.ImportConflictWindow = Ext.extend(Ext.Window, {
    /** @lends CMS.imp.ImportConflictWindow.prototype */

    /**
     * @cfg {Object} templateConflict
     * (optional) A conflicting template, given in the form <tt>{"id":String, "oldName":String, "newName": String}</tt>
     */
    templateConflict: null,

    /**
     * @cfg {Array} templateSnippetConflicts
     * (optional) The list fo conflicting template snippets; form <tt>{"id":String, "oldName":String, "newName": String}</tt>
     */
    templateSnippetConflicts: null,

    /**
     * @cfg {Array} moduleConflicts
     * An array of modules, given in the form <tt>{"id":String, "oldName":String, "newName": String}</tt>
     */
    moduleConflicts: null,

    /**
     * @cfg {Array} mediaConflicts
     * (optional) An array of media items, given in the form <tt>{"id":String, "oldName":String, "newName": String}</tt>
     */
    mediaConflicts: null,

    /**
     * @cfg {String} importId
     * An id for the failed import action (generated by backend)
     */
    importId: null,

    closable: false,
    modal: true,
    height: 800,
    width: 600,
    cls: 'CMSimportconflictwindow',

    initComponent: function () {
        this.title = CMS.i18n('Konflikt beim Import');

        this.selectedTemplates = [];
        this.selectedMedia = [];
        this.selectedModules = [];
        this.selectedSnippets = [];

        this.moduleGridStore = this.createConflictStore(this.moduleConflicts, this.selectedModules);
        this.mediaGridStore = this.createConflictStore(this.mediaConflicts, this.selectedMedia);
        this.snippetGridStore = this.createConflictStore(this.templateSnippetConflicts, this.selectedSnippets);

        var label = [
            '<div class="icon"></div>',
            '<div>', CMS.i18n('Einige importierte Objekte sind bereits vorhanden.'), '</div>'
        ].join('');

        var locks = this.getLocks();
        if (locks.length > 0) {
            // some conflicting items are locked
            // -> add warning text
            label += [
                '<div class="lock-warning">',
                CMS.i18n('Achtung! Es werden Seiten, Vorlagen und/oder Module, die sich bereits in der Bearbeitung befinden überschrieben.'),
                '<a class="lnk-lock-details">', CMS.i18n('Mehr…'), '<a>',
                '</div>'
            ].join('');
            // -> ... and show detail window on demand
            this.on('afterrender', function () {
                Ext.fly(Ext.DomQuery.selectNode('a.lnk-lock-details')).on('click', function () {
                    this.showLocks(locks);
                }, this);
            }, this);
        }


        var items = [];

        // add items for handling ...
        if (this.templateConflict) {
            // ... A) template conflics
            items.push({
                xtype: 'box',
                cls: 'box-label',
                html: '<span>' + CMS.i18n('Template ersetzen') + '</span>'
            });
            items.push({
                items: {
                    xtype: 'checkbox',
                    boxLabel: this.templateConflict.oldName,
                    handler: this.templateCheckHandler,
                    scope: this
                },
                height: 20
            });
        }

        // ... B) module conflics
        items = items.concat(this.createConflictListItems({
            conflicts: this.moduleConflicts,
            label: CMS.i18n('Folgende Module ersetzen:'),
            store: this.moduleGridStore
        }));

        // ... C) conflicts of mediaDB items
        items = items.concat(this.createConflictListItems({
            conflicts: this.mediaConflicts,
            label: CMS.i18n('Folgende MediaDB-Items ersetzen:'),
            store: this.mediaGridStore
        }));

        // ... D) conflicts of template snippets
        items = items.concat(this.createConflictListItems({
            conflicts: this.templateSnippetConflicts,
            label: CMS.i18n('Folgende Snippets ersetzen:'),
            store: this.snippetGridStore
        }));

        this.items = [{
            xtype: 'box',
            height: 80,
            cls: 'CMSimportconflicttext',
            html: label
        }, {
            height: this.height - 170, // 80px label text + 90px header and buttons
            cls: 'CMSconfictlistwrap',
            layout: 'vbox',
            layoutConfig: {
                align: 'stretch'
            },
            items: items
        }];

        this.buttonAlign = 'center';
        this.buttons = [{
            text: CMS.i18n('Fortfahren'),
            cls: 'primary',
            handler: this.okButtonHandler,
            ref: '../okButton',
            scope: this
        }, {
            text: CMS.i18n('Abbrechen'),
            handler: this.cancelButtonHandler,
            scope: this
        }];

        CMS.imp.ImportConflictWindow.superclass.initComponent.apply(this, arguments);
    },

    /**
     * Helper method that creates a store and fills it with a given set of conficts;
     * If an record becomes checked/unchecked it will be added/removed to/from the "selectedArray"
     * @private
     */
    createConflictStore: function (conflictList, selectedArray) {
        return new Ext.data.JsonStore({
            fields: [
                'id',
                'icon', {
                    name: 'oldName',
                    type: 'string'
                }, {
                    name: 'checked',
                    type: 'boolean',
                    defaultValue: false
                }
            ],
            data: conflictList || [],
            sortInfo: {
                field: 'oldName',
                direction: 'ASC'
            },
            listeners: {
                'update': function (store, record) {
                    if (record.get('checked')) {
                        // the record was seleced
                        if (selectedArray.indexOf(record) < 0) {
                            // the list does not contain the record so far
                            // -> add it
                            selectedArray.push(record);
                        }
                    } else {
                        // unselect
                        if (selectedArray.indexOf(record) >= 0) {
                            // list contains the record which was selected
                            // -> remove record from list
                            selectedArray.remove(record);
                        }
                    }
                }
            }
        });
    },

    /**
     * Helper method that creates a set of components to manage a list of conflicts;
     * It creates:
     *  - a label
     *  - a "select all" checkbox if there are more than on conflict in the list
     *  - a grid for listing the conflicts
     * @private
     */
    createConflictListItems: function (cfg) {
        var items = [];
        var checkbox;

        if (cfg.conflicts && cfg.conflicts.length > 0) {
            items.push({
                xtype: 'box',
                cls: 'box-label',
                html: '<span>' + cfg.label + '</span>',
                margins: {top: 15, left: 0, right: 0, bottom: 0}
            });

            if (cfg.conflicts.length > 1) {
                checkbox = Ext.ComponentMgr.create({
                    xtype: 'ux-tricheckbox',
                    value: false,
                    boxLabel: CMS.i18n('alle auswählen'),
                    handler: function (box, checked) {
                        cfg.store.each(function (record) {
                            record.set('checked', checked);
                        });
                    },
                    scope: this
                });

                items.push({
                    items: checkbox
                });
            }

            items.push({
                xtype: 'grid',
                store: cfg.store,
                flex: 1,
                autoExpandColumn: 'oldName',
                hideHeaders: true,
                margins: {top: 10, left: 0, right: 0, bottom: 0},
                listeners: {
                    'cellclick': function (grid, rowIndex) {
                        var store = grid.store;
                        var record = store.getAt(rowIndex);

                        record.set('checked', !record.get('checked'));

                        if (checkbox) {
                            if (store.findExact('checked', true) < 0) {
                                // no checked items in store
                                checkbox.setValue(false, true);
                            } else if (store.findExact('checked', false) < 0) {
                                // all items in store are checked
                                checkbox.setValue(true, true);
                            } else {
                                // mixed
                                checkbox.setValue(null, true);
                            }
                        }
                    }
                },

                columns: [{
                    id: 'id',
                    dataIndex: 'id',
                    hidden: true,
                    hidable: false
                }, {
                    id: 'checked',
                    width: 25,
                    dataIndex: 'checked',
                    header: '&#160;',
                    xtype: 'checkcolumn',
                    resizable: false
                }, {
                    id: 'oldName',
                    dataIndex: 'oldName',
                    header: CMS.i18n('Bezeichnung'),
                    renderer: function (name) {
                        return CMS.translateInput(name);
                    },
                    fixed: true
                }]
            });
        }
        return items;
    },

    /**
     * Gets all locks as an array of arrays: [[id, name, user, type], [id, ...] ...]
     * @private
     */
    getLocks: (function () {
        function pluckLockData(targetList, sourceList) {
            Ext.each(sourceList, function (lock) {
                targetList.push([lock.id, lock.name, lock.user, lock.type]);
            });
            return targetList;
        }
        return function () {
            var locks = pluckLockData([], this.templateConflict && this.templateConflict.locks);
            Ext.each(this.moduleConflicts, function (conflict) {
                locks = pluckLockData(locks, conflict.locks);
            }, this);
            return locks;
        };
    }()),

    /**
     * Opens a window that lists all existing locks for the conflics
     * @private
     */
    showLocks: function (locks) {
        var store = new Ext.data.GroupingStore({
            data: locks,
            reader: new Ext.data.ArrayReader({
                idIndex: 0
            }, ['id', 'name', 'user', 'type']),
            sortInfo: {
                field: 'name',
                direction: 'ASC'
            },
            groupField: 'type',
            groupDir: 'ASC'
        });

        var grid = new Ext.grid.GridPanel({
            width: 500,
            height: 400,
            autoExpandColumn: 'name',
            forceFit: true,
            columns: [{
                id: 'name',
                dataIndex: 'name',
                sortable: true,
                header: CMS.i18n('Name'),
                renderer: function (name) {
                    return CMS.translateInput(name);
                }
            }, {
                id: 'user',
                dataIndex: 'user',
                width: 250,
                header: 'Bearbeiter',
                renderer: function (user) {
                    return user.firstname + ' ' + user.lastname;
                }
            }, {
                id: 'type',
                dataIndex: 'type',
                header: CMS.i18n('Typ'),
                renderer: function (raw) {
                    switch (raw) {
                    case 'page':
                        return CMS.i18n('Seiten');
                    case 'template':
                        return CMS.i18n('Templates');
                    case 'module':
                        return CMS.i18n('Module');
                    }
                }
            }],
            view: new Ext.grid.GroupingView({
                hideGroupedColumn: true,
                showGroupName: false
            }),
            store: store
        });

        (new Ext.Window({
            title: CMS.i18n('In Bearbeitung'),
            modal: true,
            items: grid
        })).show();
    },

    /**
     * Handler for cancel button click
     * @private
     */
    cancelButtonHandler: function () {
        /**
         * @event cancel
         * Fired when the user presses the cancel button
         * @param this
         */
        this.fireEvent('cancel', this);
        this.destroy();
    },

    /**
     * Handler for ok button click
     * @private
     */
    okButtonHandler: function () {
        CMS.app.trafficManager.sendRequest({
            action: 'overwriteConflicts',
            modal: true,
            data: {
                templates: Ext.pluck(this.selectedTemplates, 'id'),
                modules: Ext.pluck(this.selectedModules, 'id'),
                media: Ext.pluck(this.selectedMedia, 'id'),
                templatesnippets: Ext.pluck(this.selectedSnippets, 'id'),
                importId: this.importId
            },
            failureTitle: CMS.i18n('Fehler beim Überschreiben'),
            success: function () {
                /**
                 * @event success
                 * Fired when the user overwrite was successful
                 * @param this
                 */
                this.fireEvent('success', this);
            },
            failure: function () {
                /**
                 * @event failure
                 * Fired when the overwrite was attempted, but failed
                 * @param this
                 */
                this.fireEvent('failure', this);
            },
            callback: this.destroy,
            scope: this
        });
    },

    /**
     * Handler for click on template checkbox
     * @private
     */
    templateCheckHandler: function (checkbox, checked) {
        if (checked) {
            this.selectedTemplates = this.templateConflict;
        } else {
            this.selectedTemplates = [];
        }
    },


    // Override superclass to destroy local conflict stores
    destroy: function () {
        this.moduleGridStore.destroy();
        this.snippetGridStore.destroy();
        this.mediaGridStore.destroy();

        CMS.imp.ImportConflictWindow.superclass.destroy.apply(this, arguments);
    }
});
