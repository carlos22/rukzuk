Ext.ns('CMS.app');

/**
* @class CMS.app.DownloadHelper
* @extends Ext.util.Observable
* A helper class for downloading files in a popup window
*/
CMS.app.DownloadHelper = Ext.extend(Ext.util.Observable, {

    /**
    * Start download of server-generated files. This method sends a request via CMS.app.TrafficManager,
    * and shows a specified link in a modal window. This is necessary since Popup-Blockers and Firewalls
    * give us a hard-time.
    * @param {Object} cfg A config object containing the following properties:<ul>
    * <li><strong>action</strong>: (String) As in {@link CMS.app.TrafficManager}</li>
    * <li><strong>data</strong>: (Object) As in {@link CMS.app.TrafficManager}</li>
    * <li><strong>urlKey</strong>: (String) The JSON key that contains the actual download URL in the response object</li>
    * <li><strong>failureTitle</strong>: (String) As in {@link CMS.app.TrafficManager}</li>
    * </ul>
    * The <tt>success</tt> and <tt>failure</tt> params for CMS.app.TrafficManager are generated by this method.
    */
    startDownload: function (cfg) {
        if (this.win) {
            this.win.getLayout().setActiveItem(0);
        } else {
            this.win = new Ext.Window({
                modal: true,
                cls: 'CMSprogress CMSdownloadprogress',
                layout: 'card',
                activeItem: 0,
                width: 250,
                plain: true,
                border: false,
                closeAction: 'hide',
                resizable: false,
                items: [{
                    plain: true,
                    border: false,
                    html: '<span class="spinner">' + CMS.i18n('Download wird vorbereitetâ€¦') + '</span>'
                }, {
                    plain: true,
                    border: false,
                    html: '<a class="downloadlink" target="_blank">' + CMS.i18n('Jetzt herunterladen') + '</a>'
                }]
            });
        }
        this.win.setTitle(CMS.i18n('Bitte einen Moment Geduld'));
        this.win.show();
        this.requestId = CMS.app.trafficManager.sendRequest({
            action: cfg.action,
            data: cfg.data,
            successCondition: cfg.urlKey,
            success: function (json) {
                this.showLink(SB.util.getObjectByIndexPath(json, cfg.urlKey));
            },
            failure: function () {
                this.win.hide();
            },
            callback: function () {
                this.requestId = null;
            },
            failureTitle: cfg.failureTitle,
            scope: this
        });
    },

    /**
    * @private
    * @param {String} url The url to show
    */
    showLink: function (url) {
        var a = Ext.fly(this.win.body.dom.getElementsByTagName('a')[0]);
        a.set({
            href: window.encodeURI(url)
        });
        a.addListener('click', function () {
            this.win.hide();
        }, this, {
            single: true
        });
        this.win.getLayout().setActiveItem(1);
        this.win.setTitle(CMS.i18n('Datei wurde erstellt'));
    },

    /**
    * @private
    * Handler for the cancel button
    */
    cancelHandler: function () {
        CMS.app.trafficManager.abortRequest(this.requestId);
        this.win.hide();
    },

    destroy: function () {
        if (this.win) {
            this.win.destroy();
        }
        this.win = null;
    }

});
